# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2018-03-23 15:23
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CardDefs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('pan_low', models.PositiveSmallIntegerField(blank=True, help_text='First six digits of card', null=True, validators=[django.core.validators.MaxValueValidator(999999), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Start of PAN-Range')),
                ('pan_high', models.PositiveSmallIntegerField(blank=True, help_text='First six digits of card', null=True, validators=[django.core.validators.MaxValueValidator(999999), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='End of PAN-Range')),
                ('standard_id', models.CharField(blank=True, choices=[('0', 'Not Set'), ('1', 'MOD10'), ('2', 'ANSI'), ('3', 'ABA'), ('4', 'CBA'), ('5', 'BOC'), ('6', 'ANSI59'), ('7', 'CCIT')], max_length=1, null=True, verbose_name='Card Verification Standard')),
                ('control_inf', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'Formatted Request'), ('01', 'Unformatted Request'), ('02', 'Positive Validation'), ('04', 'NCC Validation Required'), ('08', 'Calling card'), ('08', 'Not a calling card'), ('10', 'Early Card Specific Authorisation'), ('10', 'Delayed Card Specific Authorisation'), ('20', 'Prompt for PIN'), ('40', 'Prompt for Telco PIN'), ('80', 'Routing to ACCS')], max_length=32, null=True, verbose_name='Control Information Flags')),
                ('expiry_date_pos', models.PositiveSmallIntegerField(blank=True, help_text='Relative to 1st Field Separator', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Position of Expiry Date')),
                ('initial_date_pos', models.PositiveSmallIntegerField(blank=True, help_text='Relative to 1st Field Separator', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Position of Issue Date')),
                ('discret_data_pos', models.PositiveSmallIntegerField(blank=True, help_text='Relative to 1st Field Separator', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Position of Discretionary Data')),
                ('service_code_1', models.PositiveSmallIntegerField(blank=True, help_text='Magnetic Stripe Cards only', null=True, validators=[django.core.validators.RegexValidator('^[125679][024][01234567]$', 'Please enter a valid Service Code', 'Invalid Service Code')], verbose_name='1st 3 Digit Service Code')),
                ('service_code_2', models.PositiveSmallIntegerField(blank=True, help_text='Magnetic Stripe Cards only', null=True, validators=[django.core.validators.RegexValidator('^[125679][024][01234567]$', 'Please enter a valid Service Code', 'Invalid Service Code')], verbose_name='2nd 3 Digit Service Code')),
                ('service_code_3', models.PositiveSmallIntegerField(blank=True, help_text='Magnetic Stripe Cards only', null=True, validators=[django.core.validators.RegexValidator('^[125679][024][01234567]$', 'Please enter a valid Service Code', 'Invalid Service Code')], verbose_name='3rd 3 Digit Service Code')),
                ('service_code_4', models.PositiveSmallIntegerField(blank=True, help_text='Magnetic Stripe Cards only', null=True, validators=[django.core.validators.RegexValidator('^[125679][024][01234567]$', 'Please enter a valid Service Code', 'Invalid Service Code')], verbose_name='4th 3 Digit Service Code')),
                ('service_code_5', models.PositiveSmallIntegerField(blank=True, help_text='Magnetic Stripe Cards only', null=True, validators=[django.core.validators.RegexValidator('^[125679][024][01234567]$', 'Please enter a valid Service Code', 'Invalid Service Code')], verbose_name='5th 3 Digit Service Code')),
                ('service_code_6', models.PositiveSmallIntegerField(blank=True, help_text='MTR 1.x only. Magnetic Stripe Cards only', null=True, validators=[django.core.validators.RegexValidator('^[125679][024][01234567]$', 'Please enter a valid Service Code', 'Invalid Service Code')], verbose_name='6th 3 Digit Service Code')),
                ('service_code_7', models.PositiveSmallIntegerField(blank=True, help_text='MTR 1.x only. Magnetic Stripe Cards only', null=True, validators=[django.core.validators.RegexValidator('^[125679][024][01234567]$', 'Please enter a valid Service Code', 'Invalid Service Code')], verbose_name='7th 3 Digit Service Code')),
                ('service_code_8', models.PositiveSmallIntegerField(blank=True, help_text='MTR 1.x only. Magnetic Stripe Cards only', null=True, validators=[django.core.validators.RegexValidator('^[125679][024][01234567]$', 'Please enter a valid Service Code', 'Invalid Service Code')], verbose_name='8th 3 Digit Service Code')),
                ('service_code_9', models.PositiveSmallIntegerField(blank=True, help_text='MTR 1.x only. Magnetic Stripe Cards only', null=True, validators=[django.core.validators.RegexValidator('^[125679][024][01234567]$', 'Please enter a valid Service Code', 'Invalid Service Code')], verbose_name='9th 3 Digit Service Code')),
                ('service_code_10', models.PositiveSmallIntegerField(blank=True, help_text='MTR 1.x only. Magnetic Stripe Cards only', null=True, validators=[django.core.validators.RegexValidator('^[125679][024][01234567]$', 'Please enter a valid Service Code', 'Invalid Service Code')], verbose_name='10th 3 Digit Service Code')),
                ('spill_string', models.CharField(blank=True, help_text='MTR 2.x only. Magnetic Stripe Cards only', max_length=8, null=True, verbose_name='Spill String')),
                ('spill_term_char', models.CharField(blank=True, help_text='MTR 2.x only. Magnetic Stripe Cards only', max_length=1, null=True, verbose_name='Terminating Character for Spill String')),
                ('disc_ptr', models.PositiveSmallIntegerField(blank=True, help_text='MTR 2.x only. Magnetic Stripe Cards only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Index for discounted rate in smartcard-table')),
                ('check_digit_1', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='1st Check Digit')),
                ('check_digit_2', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='2nd Check Digit')),
                ('check_digit_3', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='3rd Check Digit')),
                ('check_digit_4', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='4th Check Digit')),
                ('check_digit_5', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='5th Check Digit')),
                ('check_digit_6', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='6th Check Digit')),
                ('check_value_1', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='1st Check Value')),
                ('check_value_2', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='2nd Check Value')),
                ('check_value_3', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='3rd Check Value')),
                ('check_value_4', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='4th Check Value')),
                ('check_value_5', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='5th Check Value')),
                ('check_value_6', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='6th Check Value')),
                ('manufacturer_1', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='1st Manufacturer Value')),
                ('manufacturer_2', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='2nd Manufacturer Value')),
                ('manufacturer_3', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='3rd Manufacturer Value')),
                ('manufacturer_4', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='4th Manufacturer Value')),
                ('manufacturer_5', models.PositiveSmallIntegerField(blank=True, help_text='Smartcard only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='5th Manufacturer Value')),
                ('spare', models.PositiveSmallIntegerField(blank=True, help_text='MTR1.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='MTR 1.x: Spare / MTR 2.x: Index for discounted rate in smartcard-table')),
                ('card_ref_num', models.PositiveSmallIntegerField(blank=True, help_text='Relative to 1st Field Separator', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Position of Language')),
                ('carrier_id', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Carrier ID')),
                ('control_inf_1', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('02', 'Reloadable Smart Card'), ('04', 'SUMMARY_CARD_REQUIRED'), ('08', 'Display remaining Credit'), ('10', 'Load-Only Magnetic Card')], help_text='MTR 2.x only', max_length=11, null=True, verbose_name='Control Information Flags')),
                ('bank_reload_ref', models.PositiveSmallIntegerField(blank=True, help_text='MTR 2.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Bank Reload Reference')),
                ('lang_code', models.PositiveSmallIntegerField(blank=True, help_text='MTR 2.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='language code to spill to switch')),
            ],
            options={
                'verbose_name': 'Card Definition',
                'verbose_name_plural': 'Card Definitions',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='CardTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'verbose_name': 'Card Table',
                'verbose_name_plural': 'Card Tables',
            },
        ),
        migrations.CreateModel(
            name='CoinValDefs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('coin_value', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Coin Value')),
                ('coin_volume', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Coin Volume')),
                ('coin_val_parms', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'Enable Coin Window'), ('02', 'Accept Coin')], max_length=5, null=True, verbose_name='Coin Parameters')),
            ],
            options={
                'verbose_name': 'Coin Validator Coin Definition',
                'verbose_name_plural': 'Coin Validator Coin Definitions',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='CoinValTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('cash_box_volume', models.PositiveIntegerField(default=20800, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Cashbox Volume')),
                ('escrow_volume', models.PositiveIntegerField(default=600, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Escrow Volume')),
                ('cash_box_volume_threshold', models.PositiveIntegerField(default=16640, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Cashbox Volume Threshold')),
                ('cash_box_value_threshold', models.BigIntegerField(default=25000, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4294967295), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Cashbox Value Threshold')),
                ('escrow_volume_threshold', models.PositiveIntegerField(default=600, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Escrow Volume Threshold')),
                ('escrow_value_threshold', models.BigIntegerField(default=600, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4294967295), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Escrow Value Threshold')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'verbose_name': 'Coin Validator parameters',
                'verbose_name_plural': 'Coin Validator parameters',
            },
        ),
        migrations.CreateModel(
            name='FconfigOpts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('terminal_type', models.CharField(choices=[('00', 'Unknown Terminal Type'), ('01', 'Card Type Terminal'), ('02', 'Universal Type Terminal'), ('03', 'Coin Terminal Type'), ('03', 'Maximim Terminal Type'), ('10', 'Smart Card Terminal Type')], default='02', max_length=2, verbose_name='Terminal Type')),
                ('display_present', models.BooleanField(default=True, verbose_name='Display present')),
                ('num_call_follow_on', models.PositiveSmallIntegerField(blank=True, default=5, null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Number of Call follows')),
                ('card_validation_info', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'Auth for Local'), ('02', 'Delay Auth'), ('04', 'MCE Auth for Local'), ('08', 'International'), ('08', 'Insert NPA for 0+ Local/Intra'), ('10', 'Manually Entered Call Card'), ('00', 'ACCS Mode use NCC'), ('80', 'Validate after Number obtained')], default=['01', '04'], max_length=23, null=True, verbose_name='Card validation info')),
                ('accs_info', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'ACCS Mode is available'), ('02', 'Route MCE Calls via 0+ network'), ('04', 'MCE Feature enable'), ('08', 'MCE Calls MUST be NCC-validated'), ('10', 'AOS Feature enable'), ('20', 'Strip off leading 0/1'), ('80', 'Strip off local NPA')], default='01', max_length=20, null=True, verbose_name='ACCS-Mode/Info')),
                ('incoming_call_mode', models.CharField(choices=[('0', 'Ringing disabled'), ('1', 'Ringing / Incoming Voice'), ('2', 'No Ringing / Data Call'), ('3', 'Ringing / Voice / Delayed Data Call')], default='1', max_length=2, verbose_name='Incoming Call mode')),
                ('incoming_call_anti_fraud', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('0', 'Answer Supervision')], default='0', max_length=1, null=True, verbose_name='Anti-Fraud for Incoming Call')),
                ('oos_pots_flags', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'Do not put Terminal Out-Of-Service when CDR list is full'), ('02', 'Display Rate (MTR 1.x: Only Card-Terminals)'), ('04', 'INCOMMING_CALL_FCA_PRECED'), ('08', 'FCA_ZERO_VALUE_CARD'), ('10', 'MTR 1.x: Spare 4 / MTR 2.x: Automatically revert to primary Modem pool'), ('20', 'MTR 1.x: Spare 5 / MTR 2.x: Block Carrier calls without nternal rate'), ('40', 'MTR 1.x: Spare 6 / MTR 2.x: Creditcard CDRs should contain the charged amount for the calls'), ('80', 'MTR 1.x: Spare 7 / MTR 2.x: Force 11-digit-dialing on local calls')], default=['01', '02', '04', '08'], max_length=23, null=True, verbose_name='Out-Of-Service POTS Flags')),
                ('data_jack_visual_display', models.BooleanField(default=False, verbose_name='Datajack visual display')),
                ('incoming_call_rate', models.PositiveSmallIntegerField(default=8, help_text='MTR1.x only', validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Incoming call rate')),
                ('language_scrolling_order', models.CharField(choices=[('1', 'English'), ('2', 'French'), ('3', 'Spanish'), ('4', 'Japanese')], default='1', help_text='MTR 2.x only', max_length=1, verbose_name='Language Scrolling Order - 1st language')),
                ('spareB', models.PositiveSmallIntegerField(blank=True, help_text='MTR1.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Spare B')),
                ('language_scrolling_order_2', models.CharField(choices=[('1', 'English'), ('2', 'French'), ('3', 'Spanish'), ('4', 'Japanese')], default='2', help_text='MTR 2.x only', max_length=1, verbose_name='Language Scrolling Order - 2nd language')),
                ('spareC', models.PositiveSmallIntegerField(blank=True, help_text='MTR1.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Spare C')),
                ('number_of_languages', models.CharField(choices=[('1', '1 Language'), ('2', '2 Languages'), ('3', '3 Languages (MTR 2.x only)'), ('4', '4 Languages (MTR 2.x only)')], default='2', help_text='MTR2.x only', max_length=1, verbose_name='Number of Languages')),
                ('spareD', models.PositiveSmallIntegerField(blank=True, help_text='MTR1.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Spare D')),
                ('rating_flags', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'Enable NPA SBR'), ('02', 'Enable International SBR'), ('04', 'Enable Dial Around'), ('08', 'Show 1st xx min $, additional yy min $'), ('10', 'Round up charge'), ('20', '7-digit no-wait Option')], default=[], help_text='MTR2.x only', max_length=17, null=True, verbose_name='Rating Flags')),
                ('spareE', models.PositiveSmallIntegerField(blank=True, help_text='MTR1.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Spare E')),
                ('dial_around_timer', models.PositiveSmallIntegerField(blank=True, help_text='MTR2.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Dial-around timer')),
                ('spareF', models.PositiveSmallIntegerField(blank=True, help_text='MTR1.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Spare F')),
                ('opr_interntl_access_ptr', models.PositiveSmallIntegerField(blank=True, help_text='MTR2.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Pointer to international Access Operator')),
                ('aos_number', models.CharField(blank=True, help_text='MTR 1.x only', max_length=12, null=True, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='AOS number')),
                ('aos_interlata_access', models.PositiveSmallIntegerField(blank=True, help_text='MTR2.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Pointer to Inter-LATA AOS-number')),
                ('aos_interntl_access', models.PositiveSmallIntegerField(blank=True, help_text='MTR2.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Pointer to International Access AOS-number')),
                ('djack_grace_before_collect', models.PositiveSmallIntegerField(blank=True, help_text='MTR2.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Datajack grace-periode before collection')),
                ('opr_collection_tmr', models.PositiveSmallIntegerField(blank=True, help_text='MTR2.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Operator collection timer\t')),
                ('opr_intralata_access_ptr', models.PositiveSmallIntegerField(blank=True, help_text='MTR2.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Pointer to Intra-LATA operator access number')),
                ('opr_interlata_access_ptr', models.PositiveSmallIntegerField(blank=True, help_text='MTR2.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Pointer to Inter-LATA operator access number')),
                ('advert_enable', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'On Hook Adverts enabled'), ('02', 'Repdialer Adverts enabled'), ('04', 'Call Established adverts enabled'), ('08', 'On Hook Date and Time displayed'), ('10', 'On Hook Date and Time displayed in 12hr Format')], default=['01'], max_length=14, null=True, verbose_name='Enable Advertising')),
                ('default_language', models.CharField(choices=[('1', 'English'), ('2', 'French'), ('3', 'Spanish'), ('4', 'Japanese')], default='1', max_length=1, verbose_name='Default Language')),
                ('display_called_number', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'Display Called Number Prompt'), ('80', 'Surpress Calling Prompt')], default=['01'], max_length=5, null=True, verbose_name='Called Number Displaying')),
                ('dtmf_duration', models.PositiveSmallIntegerField(default=8, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='DTMF Duration')),
                ('inter_digit_pause', models.PositiveSmallIntegerField(default=8, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Inter-digit Pause')),
                ('dialing_conversion', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'Convert Operator to Toll'), ('02', 'Convert Toll to Operator')], default=['01', '02'], help_text='MTR 1.x only', max_length=5, null=True, verbose_name='Incoming Call mode')),
                ('ppu_pre_auth_credit_limit', models.PositiveSmallIntegerField(default=0, help_text='MTR 2.x only', validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='PPU PreAuth Credit Limit')),
                ('coin_call_features', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'Overtime'), ('02', 'Voice-Feedback'), ('04', '2nd Warning')], default=['02', '04'], max_length=8, null=True, verbose_name='Coin calling Features')),
                ('coin_call_overtime_period', models.PositiveIntegerField(default=5, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Coin call overtime period')),
                ('coin_call_pots_time', models.PositiveIntegerField(default=120, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Coin call POTS time')),
                ('min_international_digits', models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Minimum number of digits for international calls')),
                ('def_rate_req_payment', models.PositiveSmallIntegerField(default=10, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='default rate request payment type')),
                ('next_call_revalidation_freq', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Next Call re-validation frequency')),
                ('cutoff_on_disconnect_duration', models.PositiveSmallIntegerField(default=45, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Cutoff on disconnect duration')),
                ('cdr_upload_timer_int', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='CDR Upload timer for international calls')),
                ('cdr_upload_timer_nonint', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='CDR Upload timer for non-international calls')),
                ('perf_stats_dialog_fails', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Number of performance statistics dialog fails')),
                ('co_line_check_fails', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Number of CO-line-check fails')),
                ('alt_ncc_dialog_fails', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Number of alternative NCC-dialog-check fails')),
                ('dialog_fails_till_oos', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Number of failed dialogues until Terminal goes Out-Of-Service')),
                ('dialog_fails_till_alarm', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Number of failed dialogues until alarm is sent')),
                ('smart_card_flags', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('20', 'POST_PAYMENT_RATE_REQUEST'), ('80', 'DLOG_FCG_SUPPRESS_TERMINAL_RATE_INFO')], default=['01'], max_length=5, null=True, verbose_name='Smartcard Flags')),
                ('max_man_card_dig', models.PositiveSmallIntegerField(default=14, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Maximum number of digits of manual card entry')),
                ('aos_intra_access_ptr', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Pointer to Intra-AOS access-number')),
                ('carrier_reroute_flags', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Carrier reroute-flags')),
                ('min_man_card_dig', models.PositiveSmallIntegerField(default=14, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Minimum number of digits of manual card entry')),
                ('max_smart_card_inserts', models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Maximum number of smartcard-inserts')),
                ('max_diff_smart_card_inserts', models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Maximum number of different smartcard-inserts')),
                ('aos_operator_access_ptr', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Pointer to Operator AOS-number')),
                ('data_jack_flags', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Datajack-flag')),
                ('onhook_alarm_delay', models.PositiveIntegerField(default=500, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Delay for on-hook card alarm delay')),
                ('post_onhook_alarm_delay', models.PositiveIntegerField(default=100, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Delay for on-hook card alarm delay after call')),
                ('card_alarm_duration', models.PositiveIntegerField(default=1000, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Duration of card-alarm')),
                ('alarm_cadence_on_timer', models.PositiveIntegerField(default=50, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Card-alarm On-cadence')),
                ('alarm_cadence_off_timer', models.PositiveIntegerField(default=50, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Card-alarm Off-cadence')),
                ('cardrdr_blocked_alarm_delay', models.PositiveIntegerField(default=300, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Delay until card-reader blocked Alarm')),
                ('settle_time', models.PositiveSmallIntegerField(default=8, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Settlement time')),
                ('grace_period_domestic', models.PositiveSmallIntegerField(default=5, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Grace period for domestic calls')),
                ('ias_timeout', models.PositiveSmallIntegerField(default=90, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='IAS timeout')),
                ('grace_period_international', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Grace period for international calls')),
                ('settle_time_datajack', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Settlement-time for datajack-calls')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'verbose_name': 'Feature Config & Call Options',
                'verbose_name_plural': 'Feature Config & Call Options',
            },
        ),
        migrations.CreateModel(
            name='InstallParms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('access_code', models.CharField(default='2727378', help_text='For default access-code CRASERV: 2727378', max_length=7, validators=[django.core.validators.MinLengthValidator(7), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Craft-interface access code')),
                ('key_card_num', models.CharField(default='0000000000', help_text='Only for DeskSets. Keep 0000000000 for MultiPay devices.', max_length=10, validators=[django.core.validators.MinLengthValidator(10), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Craft-interface keycard number')),
                ('install_servicing_flags', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'Predial string enable'), ('02', 'Predial string enable for toll 1+ calls'), ('04', 'Predial string enable for intl 011+ calls'), ('08', 'Prefix prdial string to all except free calls'), ('10', 'MTR 1.x: Spare 4 / MTR 2.x: Predial string enable for primary datapac'), ('20', 'MTR 1.x: Spare 5 / MTR 2.x: Predial string enable for alternate datapac'), ('40', 'MTR 1.x: Spare 6 / MTR 2.x: AMP enable'), ('80', 'Spare 7')], max_length=23, null=True, verbose_name='Install/Servicing Flags')),
                ('tx_pkt_delay', models.PositiveSmallIntegerField(default=10, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='TX Paket Delay')),
                ('rx_pkt_gap', models.PositiveSmallIntegerField(default=10, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='RX Paket Gap')),
                ('coin_servicing', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('02', 'Cashbox Query Menu is Accessible')], help_text='MTR 2.x only', max_length=2, null=True, verbose_name='Coin servicing flags')),
                ('coin_box_lock_timeout', models.PositiveIntegerField(default=300, validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Coinbox Lock Timeout')),
                ('predial_string', models.CharField(blank=True, max_length=8, null=True, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Predial String')),
                ('alt_predial_string', models.CharField(blank=True, max_length=8, null=True, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Alternate Predial String')),
                ('analog_mode_prefix', models.CharField(blank=True, help_text='MTR 2.x only', max_length=12, null=True, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Analog mode prefix for datacalls using wireless setup')),
                ('comm_saving_flags', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'Store OP-Code 996 to Upload Later with Call-in')], help_text='MTR 2.x only', max_length=2, null=True, verbose_name='Communication saving flags')),
                ('retries_till_oos', models.PositiveSmallIntegerField(blank=True, help_text='MTR 2.x only', null=True, validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Voice data timeout')),
                ('ds_serv_enable_flags', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('01', 'Enable CS-Serv - probably...')], help_text='MTR 2.x only', max_length=2, null=True, verbose_name='DS Serv enable flags')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'verbose_name': 'Installation/Service parameters',
                'verbose_name_plural': 'Installation/Service parameters',
            },
        ),
        migrations.CreateModel(
            name='NCCTermParms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('datapac_num', models.CharField(default='15145551111', help_text='Pay attention to provide the right number. Entering the wrong number might involving a trip to your device to put it back in service!', max_length=12, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Primary NCC number')),
                ('alt_datapac_num', models.CharField(default='15145551111', help_text='If you do not have a secondary NCC access-number, put in the same as the primary one.', max_length=12, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Alternate NCC number')),
                ('cad_id', models.CharField(blank=True, help_text='MTR 2.x only', max_length=8, null=True, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='CAD ID')),
                ('cpe_id', models.CharField(blank=True, help_text='MTR 2.x only', max_length=8, null=True, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='CPE ID')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'verbose_name': 'NCC/terminal access parameters',
                'verbose_name_plural': 'NCC/terminal access parameters',
            },
        ),
        migrations.CreateModel(
            name='NPANXXTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('npa', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(200), django.core.validators.MaxValueValidator(999), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='NPA')),
                ('npa_200', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='200')),
                ('npa_201', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='201')),
                ('npa_202', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='202')),
                ('npa_203', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='203')),
                ('npa_204', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='204')),
                ('npa_205', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='205')),
                ('npa_206', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='206')),
                ('npa_207', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='207')),
                ('npa_208', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='208')),
                ('npa_209', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='209')),
                ('npa_210', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='210')),
                ('npa_211', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='211')),
                ('npa_212', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='212')),
                ('npa_213', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='213')),
                ('npa_214', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='214')),
                ('npa_215', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='215')),
                ('npa_216', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='216')),
                ('npa_217', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='217')),
                ('npa_218', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='218')),
                ('npa_219', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='219')),
                ('npa_220', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='220')),
                ('npa_221', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='221')),
                ('npa_222', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='222')),
                ('npa_223', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='223')),
                ('npa_224', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='224')),
                ('npa_225', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='225')),
                ('npa_226', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='226')),
                ('npa_227', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='227')),
                ('npa_228', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='228')),
                ('npa_229', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='229')),
                ('npa_230', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='230')),
                ('npa_231', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='231')),
                ('npa_232', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='232')),
                ('npa_233', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='233')),
                ('npa_234', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='234')),
                ('npa_235', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='235')),
                ('npa_236', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='236')),
                ('npa_237', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='237')),
                ('npa_238', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='238')),
                ('npa_239', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='239')),
                ('npa_240', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='240')),
                ('npa_241', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='241')),
                ('npa_242', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='242')),
                ('npa_243', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='243')),
                ('npa_244', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='244')),
                ('npa_245', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='245')),
                ('npa_246', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='246')),
                ('npa_247', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='247')),
                ('npa_248', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='248')),
                ('npa_249', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='249')),
                ('npa_250', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='250')),
                ('npa_251', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='251')),
                ('npa_252', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='252')),
                ('npa_253', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='253')),
                ('npa_254', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='254')),
                ('npa_255', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='255')),
                ('npa_256', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='256')),
                ('npa_257', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='257')),
                ('npa_258', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='258')),
                ('npa_259', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='259')),
                ('npa_260', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='260')),
                ('npa_261', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='261')),
                ('npa_262', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='262')),
                ('npa_263', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='263')),
                ('npa_264', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='264')),
                ('npa_265', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='265')),
                ('npa_266', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='266')),
                ('npa_267', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='267')),
                ('npa_268', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='268')),
                ('npa_269', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='269')),
                ('npa_270', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='270')),
                ('npa_271', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='271')),
                ('npa_272', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='272')),
                ('npa_273', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='273')),
                ('npa_274', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='274')),
                ('npa_275', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='275')),
                ('npa_276', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='276')),
                ('npa_277', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='277')),
                ('npa_278', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='278')),
                ('npa_279', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='279')),
                ('npa_280', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='280')),
                ('npa_281', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='281')),
                ('npa_282', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='282')),
                ('npa_283', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='283')),
                ('npa_284', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='284')),
                ('npa_285', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='285')),
                ('npa_286', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='286')),
                ('npa_287', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='287')),
                ('npa_288', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='288')),
                ('npa_289', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='289')),
                ('npa_290', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='290')),
                ('npa_291', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='291')),
                ('npa_292', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='292')),
                ('npa_293', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='293')),
                ('npa_294', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='294')),
                ('npa_295', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='295')),
                ('npa_296', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='296')),
                ('npa_297', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='297')),
                ('npa_298', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='298')),
                ('npa_299', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='299')),
                ('npa_300', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='300')),
                ('npa_301', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='301')),
                ('npa_302', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='302')),
                ('npa_303', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='303')),
                ('npa_304', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='304')),
                ('npa_305', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='305')),
                ('npa_306', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='306')),
                ('npa_307', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='307')),
                ('npa_308', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='308')),
                ('npa_309', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='309')),
                ('npa_310', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='310')),
                ('npa_311', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='311')),
                ('npa_312', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='312')),
                ('npa_313', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='313')),
                ('npa_314', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='314')),
                ('npa_315', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='315')),
                ('npa_316', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='316')),
                ('npa_317', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='317')),
                ('npa_318', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='318')),
                ('npa_319', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='319')),
                ('npa_320', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='320')),
                ('npa_321', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='321')),
                ('npa_322', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='322')),
                ('npa_323', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='323')),
                ('npa_324', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='324')),
                ('npa_325', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='325')),
                ('npa_326', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='326')),
                ('npa_327', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='327')),
                ('npa_328', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='328')),
                ('npa_329', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='329')),
                ('npa_330', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='330')),
                ('npa_331', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='331')),
                ('npa_332', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='332')),
                ('npa_333', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='333')),
                ('npa_334', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='334')),
                ('npa_335', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='335')),
                ('npa_336', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='336')),
                ('npa_337', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='337')),
                ('npa_338', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='338')),
                ('npa_339', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='339')),
                ('npa_340', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='340')),
                ('npa_341', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='341')),
                ('npa_342', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='342')),
                ('npa_343', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='343')),
                ('npa_344', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='344')),
                ('npa_345', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='345')),
                ('npa_346', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='346')),
                ('npa_347', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='347')),
                ('npa_348', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='348')),
                ('npa_349', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='349')),
                ('npa_350', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='350')),
                ('npa_351', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='351')),
                ('npa_352', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='352')),
                ('npa_353', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='353')),
                ('npa_354', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='354')),
                ('npa_355', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='355')),
                ('npa_356', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='356')),
                ('npa_357', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='357')),
                ('npa_358', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='358')),
                ('npa_359', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='359')),
                ('npa_360', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='360')),
                ('npa_361', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='361')),
                ('npa_362', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='362')),
                ('npa_363', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='363')),
                ('npa_364', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='364')),
                ('npa_365', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='365')),
                ('npa_366', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='366')),
                ('npa_367', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='367')),
                ('npa_368', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='368')),
                ('npa_369', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='369')),
                ('npa_370', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='370')),
                ('npa_371', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='371')),
                ('npa_372', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='372')),
                ('npa_373', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='373')),
                ('npa_374', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='374')),
                ('npa_375', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='375')),
                ('npa_376', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='376')),
                ('npa_377', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='377')),
                ('npa_378', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='378')),
                ('npa_379', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='379')),
                ('npa_380', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='380')),
                ('npa_381', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='381')),
                ('npa_382', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='382')),
                ('npa_383', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='383')),
                ('npa_384', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='384')),
                ('npa_385', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='385')),
                ('npa_386', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='386')),
                ('npa_387', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='387')),
                ('npa_388', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='388')),
                ('npa_389', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='389')),
                ('npa_390', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='390')),
                ('npa_391', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='391')),
                ('npa_392', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='392')),
                ('npa_393', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='393')),
                ('npa_394', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='394')),
                ('npa_395', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='395')),
                ('npa_396', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='396')),
                ('npa_397', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='397')),
                ('npa_398', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='398')),
                ('npa_399', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='399')),
                ('npa_400', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='400')),
                ('npa_401', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='401')),
                ('npa_402', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='402')),
                ('npa_403', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='403')),
                ('npa_404', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='404')),
                ('npa_405', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='405')),
                ('npa_406', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='406')),
                ('npa_407', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='407')),
                ('npa_408', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='408')),
                ('npa_409', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='409')),
                ('npa_410', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='410')),
                ('npa_411', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='411')),
                ('npa_412', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='412')),
                ('npa_413', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='413')),
                ('npa_414', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='414')),
                ('npa_415', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='415')),
                ('npa_416', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='416')),
                ('npa_417', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='417')),
                ('npa_418', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='418')),
                ('npa_419', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='419')),
                ('npa_420', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='420')),
                ('npa_421', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='421')),
                ('npa_422', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='422')),
                ('npa_423', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='423')),
                ('npa_424', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='424')),
                ('npa_425', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='425')),
                ('npa_426', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='426')),
                ('npa_427', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='427')),
                ('npa_428', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='428')),
                ('npa_429', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='429')),
                ('npa_430', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='430')),
                ('npa_431', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='431')),
                ('npa_432', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='432')),
                ('npa_433', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='433')),
                ('npa_434', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='434')),
                ('npa_435', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='435')),
                ('npa_436', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='436')),
                ('npa_437', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='437')),
                ('npa_438', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='438')),
                ('npa_439', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='439')),
                ('npa_440', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='440')),
                ('npa_441', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='441')),
                ('npa_442', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='442')),
                ('npa_443', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='443')),
                ('npa_444', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='444')),
                ('npa_445', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='445')),
                ('npa_446', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='446')),
                ('npa_447', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='447')),
                ('npa_448', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='448')),
                ('npa_449', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='449')),
                ('npa_450', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='450')),
                ('npa_451', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='451')),
                ('npa_452', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='452')),
                ('npa_453', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='453')),
                ('npa_454', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='454')),
                ('npa_455', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='455')),
                ('npa_456', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='456')),
                ('npa_457', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='457')),
                ('npa_458', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='458')),
                ('npa_459', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='459')),
                ('npa_460', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='460')),
                ('npa_461', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='461')),
                ('npa_462', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='462')),
                ('npa_463', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='463')),
                ('npa_464', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='464')),
                ('npa_465', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='465')),
                ('npa_466', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='466')),
                ('npa_467', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='467')),
                ('npa_468', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='468')),
                ('npa_469', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='469')),
                ('npa_470', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='470')),
                ('npa_471', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='471')),
                ('npa_472', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='472')),
                ('npa_473', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='473')),
                ('npa_474', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='474')),
                ('npa_475', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='475')),
                ('npa_476', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='476')),
                ('npa_477', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='477')),
                ('npa_478', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='478')),
                ('npa_479', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='479')),
                ('npa_480', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='480')),
                ('npa_481', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='481')),
                ('npa_482', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='482')),
                ('npa_483', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='483')),
                ('npa_484', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='484')),
                ('npa_485', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='485')),
                ('npa_486', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='486')),
                ('npa_487', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='487')),
                ('npa_488', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='488')),
                ('npa_489', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='489')),
                ('npa_490', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='490')),
                ('npa_491', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='491')),
                ('npa_492', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='492')),
                ('npa_493', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='493')),
                ('npa_494', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='494')),
                ('npa_495', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='495')),
                ('npa_496', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='496')),
                ('npa_497', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='497')),
                ('npa_498', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='498')),
                ('npa_499', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='499')),
                ('npa_500', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='500')),
                ('npa_501', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='501')),
                ('npa_502', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='502')),
                ('npa_503', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='503')),
                ('npa_504', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='504')),
                ('npa_505', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='505')),
                ('npa_506', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='506')),
                ('npa_507', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='507')),
                ('npa_508', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='508')),
                ('npa_509', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='509')),
                ('npa_510', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='510')),
                ('npa_511', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='511')),
                ('npa_512', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='512')),
                ('npa_513', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='513')),
                ('npa_514', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='514')),
                ('npa_515', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='515')),
                ('npa_516', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='516')),
                ('npa_517', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='517')),
                ('npa_518', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='518')),
                ('npa_519', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='519')),
                ('npa_520', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='520')),
                ('npa_521', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='521')),
                ('npa_522', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='522')),
                ('npa_523', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='523')),
                ('npa_524', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='524')),
                ('npa_525', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='525')),
                ('npa_526', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='526')),
                ('npa_527', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='527')),
                ('npa_528', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='528')),
                ('npa_529', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='529')),
                ('npa_530', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='530')),
                ('npa_531', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='531')),
                ('npa_532', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='532')),
                ('npa_533', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='533')),
                ('npa_534', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='534')),
                ('npa_535', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='535')),
                ('npa_536', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='536')),
                ('npa_537', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='537')),
                ('npa_538', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='538')),
                ('npa_539', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='539')),
                ('npa_540', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='540')),
                ('npa_541', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='541')),
                ('npa_542', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='542')),
                ('npa_543', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='543')),
                ('npa_544', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='544')),
                ('npa_545', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='545')),
                ('npa_546', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='546')),
                ('npa_547', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='547')),
                ('npa_548', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='548')),
                ('npa_549', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='549')),
                ('npa_550', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='550')),
                ('npa_551', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='551')),
                ('npa_552', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='552')),
                ('npa_553', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='553')),
                ('npa_554', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='554')),
                ('npa_555', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='555')),
                ('npa_556', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='556')),
                ('npa_557', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='557')),
                ('npa_558', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='558')),
                ('npa_559', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='559')),
                ('npa_560', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='560')),
                ('npa_561', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='561')),
                ('npa_562', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='562')),
                ('npa_563', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='563')),
                ('npa_564', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='564')),
                ('npa_565', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='565')),
                ('npa_566', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='566')),
                ('npa_567', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='567')),
                ('npa_568', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='568')),
                ('npa_569', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='569')),
                ('npa_570', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='570')),
                ('npa_571', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='571')),
                ('npa_572', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='572')),
                ('npa_573', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='573')),
                ('npa_574', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='574')),
                ('npa_575', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='575')),
                ('npa_576', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='576')),
                ('npa_577', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='577')),
                ('npa_578', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='578')),
                ('npa_579', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='579')),
                ('npa_580', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='580')),
                ('npa_581', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='581')),
                ('npa_582', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='582')),
                ('npa_583', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='583')),
                ('npa_584', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='584')),
                ('npa_585', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='585')),
                ('npa_586', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='586')),
                ('npa_587', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='587')),
                ('npa_588', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='588')),
                ('npa_589', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='589')),
                ('npa_590', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='590')),
                ('npa_591', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='591')),
                ('npa_592', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='592')),
                ('npa_593', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='593')),
                ('npa_594', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='594')),
                ('npa_595', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='595')),
                ('npa_596', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='596')),
                ('npa_597', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='597')),
                ('npa_598', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='598')),
                ('npa_599', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='599')),
                ('npa_600', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='600')),
                ('npa_601', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='601')),
                ('npa_602', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='602')),
                ('npa_603', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='603')),
                ('npa_604', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='604')),
                ('npa_605', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='605')),
                ('npa_606', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='606')),
                ('npa_607', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='607')),
                ('npa_608', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='608')),
                ('npa_609', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='609')),
                ('npa_610', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='610')),
                ('npa_611', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='611')),
                ('npa_612', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='612')),
                ('npa_613', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='613')),
                ('npa_614', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='614')),
                ('npa_615', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='615')),
                ('npa_616', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='616')),
                ('npa_617', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='617')),
                ('npa_618', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='618')),
                ('npa_619', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='619')),
                ('npa_620', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='620')),
                ('npa_621', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='621')),
                ('npa_622', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='622')),
                ('npa_623', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='623')),
                ('npa_624', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='624')),
                ('npa_625', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='625')),
                ('npa_626', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='626')),
                ('npa_627', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='627')),
                ('npa_628', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='628')),
                ('npa_629', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='629')),
                ('npa_630', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='630')),
                ('npa_631', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='631')),
                ('npa_632', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='632')),
                ('npa_633', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='633')),
                ('npa_634', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='634')),
                ('npa_635', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='635')),
                ('npa_636', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='636')),
                ('npa_637', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='637')),
                ('npa_638', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='638')),
                ('npa_639', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='639')),
                ('npa_640', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='640')),
                ('npa_641', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='641')),
                ('npa_642', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='642')),
                ('npa_643', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='643')),
                ('npa_644', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='644')),
                ('npa_645', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='645')),
                ('npa_646', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='646')),
                ('npa_647', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='647')),
                ('npa_648', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='648')),
                ('npa_649', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='649')),
                ('npa_650', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='650')),
                ('npa_651', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='651')),
                ('npa_652', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='652')),
                ('npa_653', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='653')),
                ('npa_654', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='654')),
                ('npa_655', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='655')),
                ('npa_656', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='656')),
                ('npa_657', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='657')),
                ('npa_658', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='658')),
                ('npa_659', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='659')),
                ('npa_660', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='660')),
                ('npa_661', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='661')),
                ('npa_662', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='662')),
                ('npa_663', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='663')),
                ('npa_664', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='664')),
                ('npa_665', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='665')),
                ('npa_666', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='666')),
                ('npa_667', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='667')),
                ('npa_668', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='668')),
                ('npa_669', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='669')),
                ('npa_670', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='670')),
                ('npa_671', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='671')),
                ('npa_672', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='672')),
                ('npa_673', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='673')),
                ('npa_674', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='674')),
                ('npa_675', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='675')),
                ('npa_676', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='676')),
                ('npa_677', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='677')),
                ('npa_678', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='678')),
                ('npa_679', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='679')),
                ('npa_680', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='680')),
                ('npa_681', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='681')),
                ('npa_682', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='682')),
                ('npa_683', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='683')),
                ('npa_684', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='684')),
                ('npa_685', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='685')),
                ('npa_686', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='686')),
                ('npa_687', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='687')),
                ('npa_688', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='688')),
                ('npa_689', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='689')),
                ('npa_690', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='690')),
                ('npa_691', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='691')),
                ('npa_692', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='692')),
                ('npa_693', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='693')),
                ('npa_694', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='694')),
                ('npa_695', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='695')),
                ('npa_696', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='696')),
                ('npa_697', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='697')),
                ('npa_698', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='698')),
                ('npa_699', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='699')),
                ('npa_700', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='700')),
                ('npa_701', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='701')),
                ('npa_702', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='702')),
                ('npa_703', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='703')),
                ('npa_704', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='704')),
                ('npa_705', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='705')),
                ('npa_706', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='706')),
                ('npa_707', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='707')),
                ('npa_708', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='708')),
                ('npa_709', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='709')),
                ('npa_710', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='710')),
                ('npa_711', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='711')),
                ('npa_712', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='712')),
                ('npa_713', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='713')),
                ('npa_714', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='714')),
                ('npa_715', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='715')),
                ('npa_716', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='716')),
                ('npa_717', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='717')),
                ('npa_718', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='718')),
                ('npa_719', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='719')),
                ('npa_720', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='720')),
                ('npa_721', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='721')),
                ('npa_722', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='722')),
                ('npa_723', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='723')),
                ('npa_724', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='724')),
                ('npa_725', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='725')),
                ('npa_726', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='726')),
                ('npa_727', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='727')),
                ('npa_728', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='728')),
                ('npa_729', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='729')),
                ('npa_730', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='730')),
                ('npa_731', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='731')),
                ('npa_732', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='732')),
                ('npa_733', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='733')),
                ('npa_734', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='734')),
                ('npa_735', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='735')),
                ('npa_736', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='736')),
                ('npa_737', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='737')),
                ('npa_738', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='738')),
                ('npa_739', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='739')),
                ('npa_740', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='740')),
                ('npa_741', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='741')),
                ('npa_742', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='742')),
                ('npa_743', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='743')),
                ('npa_744', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='744')),
                ('npa_745', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='745')),
                ('npa_746', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='746')),
                ('npa_747', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='747')),
                ('npa_748', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='748')),
                ('npa_749', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='749')),
                ('npa_750', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='750')),
                ('npa_751', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='751')),
                ('npa_752', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='752')),
                ('npa_753', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='753')),
                ('npa_754', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='754')),
                ('npa_755', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='755')),
                ('npa_756', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='756')),
                ('npa_757', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='757')),
                ('npa_758', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='758')),
                ('npa_759', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='759')),
                ('npa_760', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='760')),
                ('npa_761', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='761')),
                ('npa_762', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='762')),
                ('npa_763', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='763')),
                ('npa_764', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='764')),
                ('npa_765', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='765')),
                ('npa_766', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='766')),
                ('npa_767', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='767')),
                ('npa_768', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='768')),
                ('npa_769', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='769')),
                ('npa_770', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='770')),
                ('npa_771', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='771')),
                ('npa_772', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='772')),
                ('npa_773', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='773')),
                ('npa_774', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='774')),
                ('npa_775', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='775')),
                ('npa_776', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='776')),
                ('npa_777', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='777')),
                ('npa_778', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='778')),
                ('npa_779', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='779')),
                ('npa_780', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='780')),
                ('npa_781', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='781')),
                ('npa_782', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='782')),
                ('npa_783', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='783')),
                ('npa_784', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='784')),
                ('npa_785', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='785')),
                ('npa_786', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='786')),
                ('npa_787', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='787')),
                ('npa_788', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='788')),
                ('npa_789', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='789')),
                ('npa_790', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='790')),
                ('npa_791', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='791')),
                ('npa_792', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='792')),
                ('npa_793', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='793')),
                ('npa_794', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='794')),
                ('npa_795', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='795')),
                ('npa_796', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='796')),
                ('npa_797', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='797')),
                ('npa_798', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='798')),
                ('npa_799', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='799')),
                ('npa_800', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='800')),
                ('npa_801', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='801')),
                ('npa_802', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='802')),
                ('npa_803', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='803')),
                ('npa_804', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='804')),
                ('npa_805', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='805')),
                ('npa_806', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='806')),
                ('npa_807', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='807')),
                ('npa_808', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='808')),
                ('npa_809', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='809')),
                ('npa_810', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='810')),
                ('npa_811', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='811')),
                ('npa_812', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='812')),
                ('npa_813', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='813')),
                ('npa_814', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='814')),
                ('npa_815', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='815')),
                ('npa_816', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='816')),
                ('npa_817', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='817')),
                ('npa_818', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='818')),
                ('npa_819', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='819')),
                ('npa_820', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='820')),
                ('npa_821', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='821')),
                ('npa_822', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='822')),
                ('npa_823', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='823')),
                ('npa_824', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='824')),
                ('npa_825', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='825')),
                ('npa_826', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='826')),
                ('npa_827', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='827')),
                ('npa_828', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='828')),
                ('npa_829', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='829')),
                ('npa_830', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='830')),
                ('npa_831', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='831')),
                ('npa_832', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='832')),
                ('npa_833', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='833')),
                ('npa_834', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='834')),
                ('npa_835', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='835')),
                ('npa_836', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='836')),
                ('npa_837', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='837')),
                ('npa_838', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='838')),
                ('npa_839', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='839')),
                ('npa_840', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='840')),
                ('npa_841', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='841')),
                ('npa_842', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='842')),
                ('npa_843', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='843')),
                ('npa_844', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='844')),
                ('npa_845', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='845')),
                ('npa_846', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='846')),
                ('npa_847', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='847')),
                ('npa_848', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='848')),
                ('npa_849', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='849')),
                ('npa_850', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='850')),
                ('npa_851', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='851')),
                ('npa_852', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='852')),
                ('npa_853', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='853')),
                ('npa_854', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='854')),
                ('npa_855', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='855')),
                ('npa_856', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='856')),
                ('npa_857', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='857')),
                ('npa_858', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='858')),
                ('npa_859', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='859')),
                ('npa_860', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='860')),
                ('npa_861', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='861')),
                ('npa_862', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='862')),
                ('npa_863', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='863')),
                ('npa_864', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='864')),
                ('npa_865', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='865')),
                ('npa_866', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='866')),
                ('npa_867', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='867')),
                ('npa_868', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='868')),
                ('npa_869', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='869')),
                ('npa_870', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='870')),
                ('npa_871', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='871')),
                ('npa_872', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='872')),
                ('npa_873', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='873')),
                ('npa_874', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='874')),
                ('npa_875', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='875')),
                ('npa_876', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='876')),
                ('npa_877', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='877')),
                ('npa_878', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='878')),
                ('npa_879', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='879')),
                ('npa_880', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='880')),
                ('npa_881', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='881')),
                ('npa_882', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='882')),
                ('npa_883', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='883')),
                ('npa_884', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='884')),
                ('npa_885', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='885')),
                ('npa_886', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='886')),
                ('npa_887', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='887')),
                ('npa_888', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='888')),
                ('npa_889', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='889')),
                ('npa_890', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='890')),
                ('npa_891', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='891')),
                ('npa_892', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='892')),
                ('npa_893', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='893')),
                ('npa_894', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='894')),
                ('npa_895', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='895')),
                ('npa_896', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='896')),
                ('npa_897', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='897')),
                ('npa_898', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='898')),
                ('npa_899', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='899')),
                ('npa_900', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='900')),
                ('npa_901', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='901')),
                ('npa_902', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='902')),
                ('npa_903', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='903')),
                ('npa_904', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='904')),
                ('npa_905', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='905')),
                ('npa_906', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='906')),
                ('npa_907', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='907')),
                ('npa_908', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='908')),
                ('npa_909', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='909')),
                ('npa_910', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='910')),
                ('npa_911', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='911')),
                ('npa_912', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='912')),
                ('npa_913', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='913')),
                ('npa_914', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='914')),
                ('npa_915', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='915')),
                ('npa_916', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='916')),
                ('npa_917', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='917')),
                ('npa_918', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='918')),
                ('npa_919', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='919')),
                ('npa_920', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='920')),
                ('npa_921', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='921')),
                ('npa_922', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='922')),
                ('npa_923', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='923')),
                ('npa_924', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='924')),
                ('npa_925', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='925')),
                ('npa_926', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='926')),
                ('npa_927', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='927')),
                ('npa_928', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='928')),
                ('npa_929', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='929')),
                ('npa_930', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='930')),
                ('npa_931', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='931')),
                ('npa_932', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='932')),
                ('npa_933', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='933')),
                ('npa_934', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='934')),
                ('npa_935', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='935')),
                ('npa_936', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='936')),
                ('npa_937', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='937')),
                ('npa_938', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='938')),
                ('npa_939', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='939')),
                ('npa_940', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='940')),
                ('npa_941', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='941')),
                ('npa_942', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='942')),
                ('npa_943', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='943')),
                ('npa_944', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='944')),
                ('npa_945', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='945')),
                ('npa_946', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='946')),
                ('npa_947', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='947')),
                ('npa_948', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='948')),
                ('npa_949', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='949')),
                ('npa_950', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='950')),
                ('npa_951', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='951')),
                ('npa_952', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='952')),
                ('npa_953', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='953')),
                ('npa_954', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='954')),
                ('npa_955', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='955')),
                ('npa_956', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='956')),
                ('npa_957', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='957')),
                ('npa_958', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='958')),
                ('npa_959', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='959')),
                ('npa_960', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='960')),
                ('npa_961', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='961')),
                ('npa_962', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='962')),
                ('npa_963', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='963')),
                ('npa_964', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='964')),
                ('npa_965', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='965')),
                ('npa_966', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='966')),
                ('npa_967', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='967')),
                ('npa_968', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='968')),
                ('npa_969', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='969')),
                ('npa_970', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='970')),
                ('npa_971', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='971')),
                ('npa_972', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='972')),
                ('npa_973', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='973')),
                ('npa_974', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='974')),
                ('npa_975', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='975')),
                ('npa_976', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='976')),
                ('npa_977', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='977')),
                ('npa_978', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='978')),
                ('npa_979', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='979')),
                ('npa_980', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='980')),
                ('npa_981', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='981')),
                ('npa_982', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='982')),
                ('npa_983', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='983')),
                ('npa_984', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='984')),
                ('npa_985', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='985')),
                ('npa_986', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='986')),
                ('npa_987', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='987')),
                ('npa_988', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='988')),
                ('npa_989', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='989')),
                ('npa_990', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='990')),
                ('npa_991', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='991')),
                ('npa_992', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='992')),
                ('npa_993', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='993')),
                ('npa_994', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='994')),
                ('npa_995', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='995')),
                ('npa_996', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='996')),
                ('npa_997', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='997')),
                ('npa_998', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='998')),
                ('npa_999', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(128), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='999')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'verbose_name': 'NPA/NXX LCD Table',
                'verbose_name_plural': 'NPA/NXX LCD Tables',
            },
        ),
        migrations.CreateModel(
            name='RateDefs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField()),
                ('rate_info', models.CharField(blank=True, choices=[('0', 'NCC rated intralata'), ('1', 'LMS rate - local'), ('2', 'Fixed charge - local'), ('3', 'Rate not available'), ('4', 'Invalid NPA/NXX'), ('5', 'Toll intralata'), ('6', 'Toll interlata'), ('7', 'NCC rated interlata'), ('8', 'NCC rated local'), ('9', 'Toll international')], help_text='Toll international only available on MTR2.x', max_length=1, null=True, verbose_name='Rate Information')),
                ('initial_period', models.PositiveIntegerField(help_text='0 equals indefinite duration', validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Initial period')),
                ('initial_charge', models.PositiveIntegerField(help_text='in Cents', validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Charge for initial period')),
                ('additional_period', models.PositiveIntegerField(help_text='0 equals indefinite duration', validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Additional period')),
                ('additional_charge', models.PositiveIntegerField(help_text='in Cents', validators=[django.core.validators.MaxValueValidator(65535), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Charge for every additional period')),
            ],
            options={
                'verbose_name': 'Rate Definition',
                'verbose_name_plural': 'Rate Definitions',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='RateTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
                ('effective_date', models.DateTimeField(verbose_name='Effective Date')),
                ('telco', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(255), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Telco')),
                ('spare', models.CharField(blank=True, max_length=32, null=True, validators=[django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Spare')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'verbose_name': 'Rate Table',
                'verbose_name_plural': 'Rate Tables',
            },
        ),
        migrations.CreateModel(
            name='terminal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term_id', models.CharField(help_text="aka: the phone's number", max_length=10, validators=[django.core.validators.MinLengthValidator(10), django.core.validators.RegexValidator('^[0-9]*$', 'Only 0-9 are allowed.', 'Invalid Number')], verbose_name='Terminal ID')),
                ('CardTable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='millenniumpanel.CardTable', verbose_name='Card Table')),
                ('CoinValTable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='millenniumpanel.CoinValTable', verbose_name='Coin Validator parameters')),
                ('FconfigOpts', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='millenniumpanel.FconfigOpts', verbose_name='Feature Config & Call Options')),
                ('InstallParms', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='millenniumpanel.InstallParms', verbose_name='Installation/Service parameters')),
                ('NCCTermParms', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='millenniumpanel.NCCTermParms', verbose_name='NCC/terminal access parameters')),
                ('NPANXXTable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='millenniumpanel.NPANXXTable', verbose_name='NPA/NXX LCD Table')),
                ('RateTable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='millenniumpanel.RateTable', verbose_name='Rate Table')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'verbose_name': 'Terminal configuration',
                'verbose_name_plural': 'Terminal configurations',
            },
        ),
        migrations.AddField(
            model_name='ratedefs',
            name='rateTable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='millenniumpanel.RateTable'),
        ),
        migrations.AddField(
            model_name='coinvaldefs',
            name='coinValTable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='millenniumpanel.CoinValTable'),
        ),
        migrations.AddField(
            model_name='carddefs',
            name='cardTable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='millenniumpanel.CardTable'),
        ),
        migrations.AlterUniqueTogether(
            name='ratetable',
            unique_together=set([('name', 'tenant')]),
        ),
        migrations.AlterUniqueTogether(
            name='npanxxtable',
            unique_together=set([('name', 'tenant')]),
        ),
        migrations.AlterUniqueTogether(
            name='ncctermparms',
            unique_together=set([('name', 'tenant')]),
        ),
        migrations.AlterUniqueTogether(
            name='installparms',
            unique_together=set([('name', 'tenant')]),
        ),
        migrations.AlterUniqueTogether(
            name='fconfigopts',
            unique_together=set([('name', 'tenant')]),
        ),
        migrations.AlterUniqueTogether(
            name='coinvaltable',
            unique_together=set([('name', 'tenant')]),
        ),
        migrations.AlterUniqueTogether(
            name='cardtable',
            unique_together=set([('name', 'tenant')]),
        ),
    ]
